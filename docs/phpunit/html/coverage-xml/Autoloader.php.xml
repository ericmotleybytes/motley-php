<?xml version="1.0"?>
<phpunit xmlns="http://schema.phpunit.de/coverage/1.0">
  <file name="Autoloader.php" path="/">
    <totals>
      <lines total="85" comments="54" code="31" executable="28" executed="28" percent="100.00"/>
      <methods count="4" tested="4" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="Autoloader" start="11" executable="28" executed="28" crap="13">
      <package full="" name="" sub="" category=""/>
      <namespace name="Motley"/>
      <method name="autoload" signature="autoload(string $class_name)" start="18" end="39" crap="3" executable="9" executed="9" coverage="100"/>
      <method name="register" signature="register() : bool" start="43" end="49" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="unregister" signature="unregister() : bool" start="53" end="59" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="isRegistered" signature="isRegistered() : bool" start="63" end="80" crap="6" executable="11" executed="11" coverage="100"/>
    </class>
    <coverage>
      <line nr="20">
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="22">
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="25">
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="26">
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="27">
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="28">
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="31">
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="32">
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="38">
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="44">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="45">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="46">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="48">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="54">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="55">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="56">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="58">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="64">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="65">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="66">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="67">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="68">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="69">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="70">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="71">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="72">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="73">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
      <line nr="79">
        <covered by="Motley\Test\AutoloaderTest::testRegisterFunction"/>
        <covered by="Motley\Test\AutoloaderTest::testAutoload"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_COMMENT">/// Source code file for the Motley::Autoloader class, plus autoload registration.</token>
      </line>
      <line no="3">
        <token name="T_COMMENT">/// @copyright Copyright (c) 2017, Eric Alan Christiansen.\n</token>
      </line>
      <line no="4">
        <token name="T_COMMENT">/// MIT License. See &lt;https://opensource.org/licenses/MIT&gt;.</token>
      </line>
      <line no="5">
        <token name="T_COMMENT">/// @file</token>
      </line>
      <line no="6">
        <token name="T_COMMENT">### Note: This file uses Uses doxygen style annotation comments.</token>
      </line>
      <line no="7">
        <token name="T_COMMENT">### Note: This file possibly includes some PHPUnit comment directives.</token>
      </line>
      <line no="8">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Motley</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9"/>
      <line no="10">
        <token name="T_COMMENT">/// Static routines to support Motley autoloading.</token>
      </line>
      <line no="11">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Autoloader</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="12">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AutoloadClassName</token>
        <token name="T_WHITESPACE">    </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Motley\Autoloader"</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">///&lt; Our autoloader class name.</token>
      </line>
      <line no="13">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AutoloadFunctionName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"autoload"</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">          </token>
        <token name="T_COMMENT">///&lt; Out autoloader function name.</token>
      </line>
      <line no="14"/>
      <line no="15">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Attempt to find source file from class name, and if found, include the file.</token>
      </line>
      <line no="16">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $class_name - The string class name of a class.</token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @return Returns false if no good file match found.</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">autoload</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$class_name</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// first replace back slashes with forward slashes.</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$file_name</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"\\"</token>
        <token name="T_COMMA">,</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"/"</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$class_name</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// add the expected file suffix.</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$file_name</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$file_name</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">".php"</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// look in parent directory of this source file, but using a sub-directory</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// path driven my namespaces.</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$candidate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DIR">__DIR__</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/../'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$file_name</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$status</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">file_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$candidate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$status</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INCLUDE_ONCE">include_once</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$candidate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// try to find something in the include_path.</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$candidate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">stream_resolve_include_path</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$file_name</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$candidate</token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// @codeCoverageIgnoreStart</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$status</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INCLUDE_ONCE">include_once</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$candidate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// @codeCoverageIgnoreEnd</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$status</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="40"/>
      <line no="41">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Registers the Motley::Autoloader::autoload routine as an autoloader.</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @return TRUE on success, else FALSE.</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">register</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">isRegistered</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$status</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">spl_autoload_register</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">                </token>
        <token name="T_ARRAY">array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">AutoloadClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">AutoloadFunctionName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">isRegistered</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="50"/>
      <line no="51">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Un-registers the Motley::Autoloader::autoload routine as an autoloader.</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @return TRUE on success, else FALSE.</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">unregister</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">isRegistered</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$status</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">spl_autoload_unregister</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">                </token>
        <token name="T_ARRAY">array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">AutoloadClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">AutoloadFunctionName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">isRegistered</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="60"/>
      <line no="61">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Check if Motley::Autoloader::autoload is SPL registered.</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @return TRUE if registered</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">isRegistered</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$callable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">AutoloadClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">AutoloadFunctionName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$autoloaders</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">spl_autoload_functions</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$autoloaders</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">            </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$autoloaders</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$autoloader</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$autoloader</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$autoloader</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_VARIABLE">$callable</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$autoloader</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_VARIABLE">$callable</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_BREAK">break</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="81"/>
      <line no="82">
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_COMMENT">// end of class Motley\Autoloader</token>
      </line>
      <line no="83">
        <token name="T_COMMENT">// register this autoload function</token>
      </line>
      <line no="84">
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Motley</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Autoloader</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">register</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="85">
        <token name="T_CLOSE_TAG">?&gt;</token>
      </line>
      <line no="86"/>
    </source>
  </file>
</phpunit>
