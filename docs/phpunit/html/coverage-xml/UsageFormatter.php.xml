<?xml version="1.0"?>
<phpunit xmlns="http://schema.phpunit.de/coverage/1.0">
  <file name="UsageFormatter.php" path="/">
    <totals>
      <lines total="366" comments="280" code="86" executable="141" executed="141" percent="100.00"/>
      <methods count="22" tested="22" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="UsageFormatter" start="22" executable="141" executed="141" crap="51">
      <package full="" name="" sub="" category=""/>
      <namespace name="Motley"/>
      <method name="__construct" signature="__construct()" start="39" end="47" crap="1" executable="8" executed="8" coverage="100"/>
      <method name="clear" signature="clear()" start="50" end="53" crap="1" executable="3" executed="3" coverage="100"/>
      <method name="formatBreak" signature="formatBreak()" start="56" end="59" crap="1" executable="3" executed="3" coverage="100"/>
      <method name="formatText" signature="formatText(&#10;        string $text, int $col=0, bool $isMinCol=false)" start="70" end="82" crap="3" executable="8" executed="8" coverage="100"/>
      <method name="formatChunk" signature="formatChunk(&#10;        string $chunk, int $col=0, bool $isMinCol=false)" start="93" end="228" crap="23" executable="80" executed="80" coverage="100"/>
      <method name="getFormattedText" signature="getFormattedText() : string" start="232" end="241" crap="3" executable="6" executed="6" coverage="100"/>
      <method name="outputFormattedText" signature="outputFormattedText()" start="244" end="246" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="setColumnWidth" signature="setColumnWidth(int $cols=0)" start="252" end="254" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="getColumnWidth" signature="getColumnWidth() : int" start="260" end="276" crap="3" executable="7" executed="7" coverage="100"/>
      <method name="setLeftIndent" signature="setLeftIndent(int $numCols)" start="280" end="282" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="getLeftIndent" signature="getLeftIndent() : int" start="286" end="288" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setRightIndent" signature="setRightIndent(int $numCols)" start="292" end="294" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="getRightIndent" signature="getRightIndent() : int" start="298" end="300" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setContinueIndent" signature="setContinueIndent(int $numCols)" start="304" end="306" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="getContinueIndent" signature="getContinueIndent() : int" start="310" end="312" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setMaxLength" signature="setMaxLength(int $maxlen)" start="316" end="318" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="getMaxLength" signature="getMaxLength() : int" start="322" end="324" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setEOL" signature="setEOL(string $eol=PHP_EOL)" start="330" end="332" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="getEOL" signature="getEOL()" start="336" end="338" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setParam" signature="setParam(string $name, $value)" start="343" end="350" crap="2" executable="5" executed="5" coverage="100"/>
      <method name="getParam" signature="getParam(string $name)" start="355" end="357" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getParams" signature="getParams() : array" start="361" end="363" crap="1" executable="1" executed="1" coverage="100"/>
    </class>
    <coverage>
      <line nr="40">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testGetMessenger"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testNew"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetLeftIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetRightIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetContIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetEOL"/>
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="41">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testGetMessenger"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testNew"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetLeftIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetRightIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetContIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetEOL"/>
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="42">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testGetMessenger"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testNew"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetLeftIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetRightIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetContIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetEOL"/>
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="43">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testGetMessenger"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testNew"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetLeftIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetRightIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetContIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetEOL"/>
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="44">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testGetMessenger"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testNew"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetLeftIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetRightIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetContIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetEOL"/>
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="45">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testGetMessenger"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testNew"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetLeftIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetRightIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetContIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetEOL"/>
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="46">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testGetMessenger"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testNew"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetLeftIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetRightIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetContIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetEOL"/>
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="47">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testGetMessenger"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testNew"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetLeftIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetRightIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetContIndent"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetEOL"/>
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="51">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
      </line>
      <line nr="52">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
      </line>
      <line nr="53">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
      </line>
      <line nr="57">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="58">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="59">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="72">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="73">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="74">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="75">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="76">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="77">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="79">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="82">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="95">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="96">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="97">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="98">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="99">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="102">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="103">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="104">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="105">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="108">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="109">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="110">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="112">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="113">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="114">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="115">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="116">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="117">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="118">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="119">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="120">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="135">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="137">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="139">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="140">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="141">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="142">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="144">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="145">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="146">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="149">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="150">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="151">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="154">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="155">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="158">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="159">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="160">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="163">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="166">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="167">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="168">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="171">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="172">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="173">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="176">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="177">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="179">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="180">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="183">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="184">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="185">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="186">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="187">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="189">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="191">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="192">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="193">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="194">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="196">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="197">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="198">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="202">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="203">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="204">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="205">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="206">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="207">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="208">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="210">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="211">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="214">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="215">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="216">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="217">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="218">
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
      </line>
      <line nr="223">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="224">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="227">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="228">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="233">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="234">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="235">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="236">
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="237">
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="240">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="245">
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
      </line>
      <line nr="246">
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
      </line>
      <line nr="253">
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
      </line>
      <line nr="254">
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
      </line>
      <line nr="261">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="262">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="264">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="265">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="266">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="273">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="275">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="281">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetLeftIndent"/>
      </line>
      <line nr="282">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetLeftIndent"/>
      </line>
      <line nr="287">
        <covered by="Motley\Test\UsageFormatterTest::testSetGetLeftIndent"/>
      </line>
      <line nr="293">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetRightIndent"/>
      </line>
      <line nr="294">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetRightIndent"/>
      </line>
      <line nr="299">
        <covered by="Motley\Test\UsageFormatterTest::testSetGetRightIndent"/>
      </line>
      <line nr="305">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetContIndent"/>
      </line>
      <line nr="306">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetContIndent"/>
      </line>
      <line nr="311">
        <covered by="Motley\Test\UsageFormatterTest::testSetGetContIndent"/>
      </line>
      <line nr="317">
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="318">
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="323">
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
      </line>
      <line nr="331">
        <covered by="Motley\Test\UsageFormatterTest::testSetGetEOL"/>
      </line>
      <line nr="332">
        <covered by="Motley\Test\UsageFormatterTest::testSetGetEOL"/>
      </line>
      <line nr="337">
        <covered by="Motley\Test\UsageFormatterTest::testSetGetEOL"/>
      </line>
      <line nr="344">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="345">
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="346">
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="348">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="350">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="356">
        <covered by="Motley\Test\CommandDemoTest::testRunDefaultHelp"/>
        <covered by="Motley\Test\CommandDemoTest::testRunHelp"/>
        <covered by="Motley\Test\T222_MotleyCommandTest::testHelp"/>
        <covered by="Motley\Test\UsageFormatterTest::testClearOutput"/>
        <covered by="Motley\Test\UsageFormatterTest::testFormatting"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetColumnWidth"/>
        <covered by="Motley\Test\UsageFormatterTest::testSetGetMaxLength"/>
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
      <line nr="362">
        <covered by="Motley\Test\UsageFormatterTest::testGetSetParam"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_COMMENT">/// Source code file for the Motley::UsageFormatter class.</token>
      </line>
      <line no="3">
        <token name="T_COMMENT">/// @copyright Copyright (c) 2017, Eric Alan Christiansen.\n</token>
      </line>
      <line no="4">
        <token name="T_COMMENT">/// MIT License. See &lt;https://opensource.org/licenses/MIT&gt;.</token>
      </line>
      <line no="5">
        <token name="T_COMMENT">/// @file</token>
      </line>
      <line no="6">
        <token name="T_COMMENT">### Note: This file uses Uses doxygen style annotation comments.</token>
      </line>
      <line no="7">
        <token name="T_COMMENT">### Note: This file possibly includes some PHPUnit comment directives.</token>
      </line>
      <line no="8">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Motley</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9"/>
      <line no="10">
        <token name="T_COMMENT">/// Text formatter especially suited for usage explanations.</token>
      </line>
      <line no="11">
        <token name="T_COMMENT">/// For example, man pages and --help screens.</token>
      </line>
      <line no="12">
        <token name="T_COMMENT">/// This class implements a capability to wrap plain text not by words,</token>
      </line>
      <line no="13">
        <token name="T_COMMENT">/// but rather by user-defined chunks of text. A "wrap" may occur between</token>
      </line>
      <line no="14">
        <token name="T_COMMENT">/// chunks, but never within one. However a "cut" may happen if absolutely</token>
      </line>
      <line no="15">
        <token name="T_COMMENT">/// needed, such as if the chunk length is longer than display width.</token>
      </line>
      <line no="16">
        <token name="T_COMMENT">/// More traditional word wrap is still available.</token>
      </line>
      <line no="17">
        <token name="T_COMMENT">/// It is also possible to place text at (or beyond) certain columns.</token>
      </line>
      <line no="18">
        <token name="T_COMMENT">/// Additional features are also implemented, just as left and right</token>
      </line>
      <line no="19">
        <token name="T_COMMENT">/// indenting, continuation indenting, multi-line column alignment,</token>
      </line>
      <line no="20">
        <token name="T_COMMENT">/// maximum total length, automatic display column width detection,</token>
      </line>
      <line no="21">
        <token name="T_COMMENT">/// and so forth.</token>
      </line>
      <line no="22">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">UsageFormatter</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">    </token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DEFAULT_COLS</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">80</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">///&lt; Column width if it cannot be figured out.</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">COLUMNS</token>
        <token name="T_WHITESPACE">       </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"COLUMNS"</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">      </token>
        <token name="T_COMMENT">///&lt; Param name for column width.</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MAX_LENGTH</token>
        <token name="T_WHITESPACE">    </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"MAX_LENGTH"</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_COMMENT">///&lt; Param name for max buf length.</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">LEFT_INDENT</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"LEFT_INDENT"</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_COMMENT">///&lt; Param name for left indent.</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">CONT_INDENT</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"CONT_INDENT"</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_COMMENT">///&lt; Param name for continuation indent.</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RIGHT_INDENT</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"RIGHT_INDENT"</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">///&lt; Param name for right indent.</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">EOL</token>
        <token name="T_WHITESPACE">           </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"EOL"</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">          </token>
        <token name="T_COMMENT">///&lt; Param name for end-of-line chars.</token>
      </line>
      <line no="31"/>
      <line no="32">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$params</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_COMMENT">///&lt; Associative array of formatting params.</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$paramNames</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">///&lt; Valid param names.</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$eol</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PHP_EOL</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///&lt; End of line char(s).</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$textBuf</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">      </token>
        <token name="T_COMMENT">///&lt; Formatted text buffer.</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$newBreak</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///&lt; Is first line of a continuation group?</token>
      </line>
      <line no="37"/>
      <line no="38">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Class instance constructor.</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">COLUMNS</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE">      </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_COMMENT">// Auto set column width later.</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">MAX_LENGTH</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_COMMENT">// No limit on buffer length.</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">LEFT_INDENT</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_COMMENT">// No indent.</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">CONT_INDENT</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_COMMENT">// No additional continuation indent.</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">RIGHT_INDENT</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_COMMENT">// No additional continuation indent.</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">EOL</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE">          </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PHP_EOL</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// End-of-line chars.</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">paramNames</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_keys</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Valid param key names.</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="48"/>
      <line no="49">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Clear the text buffer.</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">clear</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">textBuf</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">newBreak</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="54"/>
      <line no="55">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// add a line break</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">formatBreak</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">textBuf</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParam</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">EOL</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">newBreak</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="60"/>
      <line no="61">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Format some wrapable text.</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $text - some wrapable text. Should not generally</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   have any embedded line-feeds, carriage returns, or tabs.</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $col - column number (starting at 1) at which the</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   chunk is desired to be placed. If $col is too small or two</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   large for current indentations and display widths it will</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   be automatically adjusted. Zero means any column is ok.</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $isMinCol - false (default) means chunk placed at exactly $col,</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   true means at of after.</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">formatText</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$text</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$isMinCol</token>
        <token name="T_EQUAL">=</token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">explode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" "</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$text</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$wordCnt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$word</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$wordCnt</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$wordCnt</token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">formatChunk</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$word</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$isMinCol</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">formatChunk</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$word</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_COMMA">,</token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="83"/>
      <line no="84">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Format some non-wrapable text.</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $chunk - a non-wrapable chunk of text. Should not generally</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   have any embedded line-feeds, carriage returns, or tabs.</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $col - column number (starting at 1) at which the</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   chunk is desired to be placed. If $col is too small or two</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   large for current indentations and display widths it will</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   be automatically adjusted. Zero means any column is ok.</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $isMinCol - false (default) means chunk placed at exactly $col,</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   true means at of after.</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">formatChunk</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$isMinCol</token>
        <token name="T_EQUAL">=</token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$lIndent</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParam</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">LEFT_INDENT</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$rIndent</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParam</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">RIGHT_INDENT</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="97">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$cIndent</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParam</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">CONT_INDENT</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$maxLen</token>
        <token name="T_WHITESPACE">    </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParam</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">MAX_LENGTH</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$width</token>
        <token name="T_WHITESPACE">     </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getColumnWidth</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT"># effective width is width less right indent, but it still</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT"># must be at least left indent plus continue indent plus 1.</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$effWidth</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$width</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$rIndent</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$effWidth</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">max</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$effWidth</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$lIndent</token>
        <token name="T_PLUS">+</token>
        <token name="T_VARIABLE">$cIndent</token>
        <token name="T_PLUS">+</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$eol</token>
        <token name="T_WHITESPACE">       </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParam</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">EOL</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$space</token>
        <token name="T_WHITESPACE">     </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" "</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="106">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT"># column position (if not 0) must be &gt; total indent and</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT"># also &lt;= effective width</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_GT">&gt;</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">max</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$lIndent</token>
        <token name="T_PLUS">+</token>
        <token name="T_VARIABLE">$cIndent</token>
        <token name="T_PLUS">+</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">min</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$effWidth</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$continued</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$effDelim</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$space</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">explode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$eol</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">textBuf</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$savedChunk</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$sameCount</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"\n"</token>
        <token name="T_COMMA">,</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"\r"</token>
        <token name="T_COMMA">,</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"\t"</token>
        <token name="T_COMMA">,</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" "</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">        </token>
        <token name="T_WHILE">while</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_GT">&gt;</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// add defensive code to prevent accidental infinite looping</token>
      </line>
      <line no="122">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// @codeCoverageIgnoreStart</token>
      </line>
      <line no="123">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$savedChunk</token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$sameCount</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$sameCount</token>
        <token name="T_GT">&gt;</token>
        <token name="T_LNUMBER">3</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$msg</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Infinite formatting loop detected."</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="127">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING">trigger_error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$msg</token>
        <token name="T_COMMA">,</token>
        <token name="T_STRING">E_USER_WARNING</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="128">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_BREAK">break</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$sameCount</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// @codeCoverageIgnoreEnd</token>
      </line>
      <line no="134">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT"># begin processing</token>
      </line>
      <line no="135">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_COMMENT"># last line index</token>
      </line>
      <line no="136">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// handle indenting</token>
      </line>
      <line no="137">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">newBreak</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LOGICAL_AND">and</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT"># very first chunk in continuation group</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_repeat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$space</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$lIndent</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="140">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$effDelim</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_COMMENT"># no need for delimiter</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">newBreak</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT"># starting a continuation line</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_repeat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$space</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$lIndent</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="145">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_repeat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$space</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$cIndent</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$effDelim</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_COMMENT"># no need for delimiter</token>
      </line>
      <line no="147">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="148">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// handle delimiter</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$charsRemaining</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$effWidth</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$charsRemaining</token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$effDelim</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$effDelim</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="153">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT"># add new line and loop again</token>
      </line>
      <line no="154">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="155">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="156">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="157">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT"># if mincol is true, but not at col yet, turn off min flag</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_GT">&gt;</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LOGICAL_AND">and</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$isMinCol</token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="160">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$isMinCol</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="161">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="162">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_GT">&gt;</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LOGICAL_AND">and</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$isMinCol</token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT"># output at specific column requested</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT"># if past column, add new line and loop.</token>
      </line>
      <line no="166">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="167">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="168">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="169">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="170">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT"># pad to column if needed</token>
      </line>
      <line no="171">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$padCharsNeeded</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_MINUS">-</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="172">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$padCharsNeeded</token>
        <token name="T_GT">&gt;</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="173">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_repeat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$space</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$padCharsNeeded</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="174">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="175">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT"># add as much of $chunk as possible, cutting if needed.</token>
      </line>
      <line no="176">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$charsRemaining</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$effWidth</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="177">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_VARIABLE">$charsRemaining</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_COMMENT"># entire chunk fits</token>
      </line>
      <line no="179">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="180">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_COMMENT"># meets while loop exit condition</token>
      </line>
      <line no="181">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="182">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_COMMENT"># force to do cut</token>
      </line>
      <line no="183">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$portion</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_COMMA">,</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$charsRemaining</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="184">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$portion</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="185">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$charsRemaining</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="186">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_COMMENT"># add another line and loop</token>
      </line>
      <line no="187">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="188">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="189">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$col</token>
        <token name="T_GT">&gt;</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LOGICAL_AND">and</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$isMinCol</token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="190">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT"># output at or past specific column requested</token>
      </line>
      <line no="191">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$charsRemaining</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$effWidth</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="192">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_VARIABLE">$charsRemaining</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="193">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="194">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_COMMENT"># meets while loop exit condition</token>
      </line>
      <line no="195">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="196">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$isMinCol</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_COMMENT"># now in at col mode</token>
      </line>
      <line no="197">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_COMMENT"># add another line and loop</token>
      </line>
      <line no="198">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="199">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="200">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="201">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT"># no specific output column requested</token>
      </line>
      <line no="202">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$charsRemaining</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$effWidth</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="203">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$contWidth</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$effWidth</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParam</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">CONT_INDENT</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="204">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$contWidth</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$effWidth</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cIndent</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="205">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_VARIABLE">$charsRemaining</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="206">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="207">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_COMMENT"># while exit condition</token>
      </line>
      <line no="208">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_VARIABLE">$contWidth</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="209">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_COMMENT"># add new line and loop</token>
      </line>
      <line no="210">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="211">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="212">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="213">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_COMMENT"># forced to do cut</token>
      </line>
      <line no="214">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$portion</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_COMMA">,</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$charsRemaining</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="215">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$last</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$portion</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="216">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$chunk</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$charsRemaining</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="217">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_COMMENT"># add another line and loop</token>
      </line>
      <line no="218">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="219">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="220">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="221">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_COMMENT"># end of while loop</token>
      </line>
      <line no="222">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT"># trim possible trailing delim from lines</token>
      </line>
      <line no="223">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOR">for</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$idx</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$idx</token>
        <token name="T_LT">&lt;</token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$idx</token>
        <token name="T_INC">++</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="224">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$idx</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">rtrim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$idx</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="225">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="226">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT"># convert line array into one big string and save it</token>
      </line>
      <line no="227">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">textBuf</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$eol</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="228">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="229"/>
      <line no="230">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Get the chunk buffer as a (possibly multiline) string.</token>
      </line>
      <line no="231">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @return The resultant textual string.</token>
      </line>
      <line no="232">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getFormattedText</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="233">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">textBuf</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="234">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$maxlen</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">MAX_LENGTH</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="235">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$maxlen</token>
        <token name="T_GT">&gt;</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="236">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$maxlen</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="237">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_COMMA">,</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$maxlen</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="238">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="239">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="240">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="241">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="242"/>
      <line no="243">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Output the chunk buffer to standard output.</token>
      </line>
      <line no="244">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">outputFormattedText</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="245">
        <token name="T_WHITESPACE">        </token>
        <token name="T_ECHO">echo</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getFormattedText</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="246">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="247"/>
      <line no="248">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Set output column width to be used by the formatter.</token>
      </line>
      <line no="249">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $cols - The number of text character columns.</token>
      </line>
      <line no="250">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   A value of zero means the column width will be automatically</token>
      </line>
      <line no="251">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   determined.</token>
      </line>
      <line no="252">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setColumnWidth</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="253">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">COLUMNS</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="254">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="255"/>
      <line no="256">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Get the output column width being used by formatter.</token>
      </line>
      <line no="257">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// This width, if too low for indentations, might be adjusted</token>
      </line>
      <line no="258">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// internally at run time.</token>
      </line>
      <line no="259">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @returns column width being used by the formatter.</token>
      </line>
      <line no="260">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getColumnWidth</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="261">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParam</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">COLUMNS</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="262">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="263">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT"># try 'tput cols', although this does not work on all platforms</token>
      </line>
      <line no="264">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$out</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">exec</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'tput cols'</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$stat</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="265">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$stat</token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="266">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_EQUAL">=</token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$out</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="267">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="268">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// @codeCoverageIgnoreStart</token>
      </line>
      <line no="269">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// Code ignore because tput always works on my linux.</token>
      </line>
      <line no="270">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_COLS</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="271">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// @codeCoverageIgnoreEnd</token>
      </line>
      <line no="272">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="273">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setParam</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">COLUMNS</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="274">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="275">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="276">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="277"/>
      <line no="278">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Set the left indentation.</token>
      </line>
      <line no="279">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $numCols - number of columns to indent on the left.</token>
      </line>
      <line no="280">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setLeftIndent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$numCols</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="281">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">LEFT_INDENT</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$numCols</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="282">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="283"/>
      <line no="284">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Get the left indentation.</token>
      </line>
      <line no="285">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @return - number of columns to indent on the left.</token>
      </line>
      <line no="286">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getLeftIndent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="287">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">LEFT_INDENT</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="288">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="289"/>
      <line no="290">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Set the right indentation.</token>
      </line>
      <line no="291">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $numCols - number of columns to indent on the right.</token>
      </line>
      <line no="292">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setRightIndent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$numCols</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="293">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">RIGHT_INDENT</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$numCols</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="294">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="295"/>
      <line no="296">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Get the right indentation.</token>
      </line>
      <line no="297">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @return - number of columns to indent on the right.</token>
      </line>
      <line no="298">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getRightIndent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="299">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">RIGHT_INDENT</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="300">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="301"/>
      <line no="302">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Set the continue indentation.</token>
      </line>
      <line no="303">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $numCols - number of additional columns to left indent continuation lines.</token>
      </line>
      <line no="304">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setContinueIndent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$numCols</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="305">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">CONT_INDENT</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$numCols</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="306">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="307"/>
      <line no="308">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Get the continue indentation.</token>
      </line>
      <line no="309">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @return - number of additional columns to left indent continuation lines.</token>
      </line>
      <line no="310">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getContinueIndent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="311">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">CONT_INDENT</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="312">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="313"/>
      <line no="314">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Set the maximum length of the total formatted text.</token>
      </line>
      <line no="315">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $maxlen - The maximum length in number of text characters.</token>
      </line>
      <line no="316">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setMaxLength</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$maxlen</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="317">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">MAX_LENGTH</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$maxlen</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="318">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="319"/>
      <line no="320">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Get the maximum length of the total formatted text.</token>
      </line>
      <line no="321">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @return The maximum length in number of text characters.</token>
      </line>
      <line no="322">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getMaxLength</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="323">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">MAX_LENGTH</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="324">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="325"/>
      <line no="326">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Set the end-of-line character(s). By default the</token>
      </line>
      <line no="327">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// platform specific value from PHP_EOL is used.</token>
      </line>
      <line no="328">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $eol - The end-of-line character(s) to use. The</token>
      </line>
      <line no="329">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">///   default is PHP_EOL.</token>
      </line>
      <line no="330">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setEOL</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$eol</token>
        <token name="T_EQUAL">=</token>
        <token name="T_STRING">PHP_EOL</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="331">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">EOL</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$eol</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="332">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="333"/>
      <line no="334">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Get the end-of-line character(s).</token>
      </line>
      <line no="335">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @return The end-of-line character(s) in use.</token>
      </line>
      <line no="336">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getEOL</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="337">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">EOL</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="338">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="339"/>
      <line no="340">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Set a parameter value.</token>
      </line>
      <line no="341">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $name - The parameter name.</token>
      </line>
      <line no="342">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $value - The parameter value.</token>
      </line>
      <line no="343">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setParam</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="344">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_COMMA">,</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">paramNames</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="345">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$msg</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">'</token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">' is not a valid parameter name.</token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="346">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">trigger_error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$msg</token>
        <token name="T_COMMA">,</token>
        <token name="T_STRING">E_USER_WARNING</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="347">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="348">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="349">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="350">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="351"/>
      <line no="352">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Get a parameter value.</token>
      </line>
      <line no="353">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @param $name - The parameter name.</token>
      </line>
      <line no="354">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @return The parameter value.</token>
      </line>
      <line no="355">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getParam</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="356">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="357">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="358"/>
      <line no="359">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// Get all parameters.</token>
      </line>
      <line no="360">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/// @return The parameter associative array.</token>
      </line>
      <line no="361">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getParams</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="362">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">params</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="363">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="364"/>
      <line no="365">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="366">
        <token name="T_CLOSE_TAG">?&gt;</token>
      </line>
      <line no="367"/>
    </source>
  </file>
</phpunit>
